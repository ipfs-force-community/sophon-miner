// Code generated by ./gen/api. DO NOT EDIT.

package api

import (
	"context"
	"errors"

	"github.com/filecoin-project/go-address"
	"github.com/filecoin-project/go-state-types/abi"
	"github.com/filecoin-project/venus-miner/types"
	sharedTypes "github.com/filecoin-project/venus/venus-shared/types"
	"github.com/google/uuid"
)

var ErrNotSupported = errors.New("method not supported")

type CommonStruct struct {
	Internal struct {
		Closing func(p0 context.Context) (<-chan struct{}, error) `perm:"read"`

		LogList func(p0 context.Context) ([]string, error) `perm:"write"`

		LogSetLevel func(p0 context.Context, p1 string, p2 string) error `perm:"write"`

		Session func(p0 context.Context) (uuid.UUID, error) `perm:"read"`

		Shutdown func(p0 context.Context) error `perm:"admin"`

		Version func(p0 context.Context) (sharedTypes.Version, error) `perm:"read"`
	}
}

type CommonStub struct {
}

type MinerAPIStruct struct {
	CommonStruct

	Internal struct {
		CountWinners func(p0 context.Context, p1 []address.Address, p2 abi.ChainEpoch, p3 abi.ChainEpoch) ([]types.CountWinners, error) `perm:"read"`

		ListAddress func(p0 context.Context) ([]types.MinerInfo, error) `perm:"read"`

		Start func(p0 context.Context, p1 []address.Address) error `perm:"admin"`

		StatesForMining func(p0 context.Context, p1 []address.Address) ([]types.MinerState, error) `perm:"read"`

		Stop func(p0 context.Context, p1 []address.Address) error `perm:"admin"`

		UpdateAddress func(p0 context.Context, p1 int64, p2 int64) ([]types.MinerInfo, error) `perm:"write"`

		WarmupForMiner func(p0 context.Context, p1 address.Address) error `perm:"admin"`
	}
}

type MinerAPIStub struct {
	CommonStub
}

func (s *CommonStruct) Closing(p0 context.Context) (<-chan struct{}, error) {
	if s.Internal.Closing == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.Closing(p0)
}

func (s *CommonStub) Closing(p0 context.Context) (<-chan struct{}, error) {
	return nil, ErrNotSupported
}

func (s *CommonStruct) LogList(p0 context.Context) ([]string, error) {
	if s.Internal.LogList == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.LogList(p0)
}

func (s *CommonStub) LogList(p0 context.Context) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *CommonStruct) LogSetLevel(p0 context.Context, p1 string, p2 string) error {
	if s.Internal.LogSetLevel == nil {
		return ErrNotSupported
	}
	return s.Internal.LogSetLevel(p0, p1, p2)
}

func (s *CommonStub) LogSetLevel(p0 context.Context, p1 string, p2 string) error {
	return ErrNotSupported
}

func (s *CommonStruct) Session(p0 context.Context) (uuid.UUID, error) {
	if s.Internal.Session == nil {
		return *new(uuid.UUID), ErrNotSupported
	}
	return s.Internal.Session(p0)
}

func (s *CommonStub) Session(p0 context.Context) (uuid.UUID, error) {
	return *new(uuid.UUID), ErrNotSupported
}

func (s *CommonStruct) Shutdown(p0 context.Context) error {
	if s.Internal.Shutdown == nil {
		return ErrNotSupported
	}
	return s.Internal.Shutdown(p0)
}

func (s *CommonStub) Shutdown(p0 context.Context) error {
	return ErrNotSupported
}

func (s *CommonStruct) Version(p0 context.Context) (sharedTypes.Version, error) {
	if s.Internal.Version == nil {
		return *new(sharedTypes.Version), ErrNotSupported
	}
	return s.Internal.Version(p0)
}

func (s *CommonStub) Version(p0 context.Context) (sharedTypes.Version, error) {
	return *new(sharedTypes.Version), ErrNotSupported
}

func (s *MinerAPIStruct) CountWinners(p0 context.Context, p1 []address.Address, p2 abi.ChainEpoch, p3 abi.ChainEpoch) ([]types.CountWinners, error) {
	if s.Internal.CountWinners == nil {
		return *new([]types.CountWinners), ErrNotSupported
	}
	return s.Internal.CountWinners(p0, p1, p2, p3)
}

func (s *MinerAPIStub) CountWinners(p0 context.Context, p1 []address.Address, p2 abi.ChainEpoch, p3 abi.ChainEpoch) ([]types.CountWinners, error) {
	return *new([]types.CountWinners), ErrNotSupported
}

func (s *MinerAPIStruct) ListAddress(p0 context.Context) ([]types.MinerInfo, error) {
	if s.Internal.ListAddress == nil {
		return *new([]types.MinerInfo), ErrNotSupported
	}
	return s.Internal.ListAddress(p0)
}

func (s *MinerAPIStub) ListAddress(p0 context.Context) ([]types.MinerInfo, error) {
	return *new([]types.MinerInfo), ErrNotSupported
}

func (s *MinerAPIStruct) Start(p0 context.Context, p1 []address.Address) error {
	if s.Internal.Start == nil {
		return ErrNotSupported
	}
	return s.Internal.Start(p0, p1)
}

func (s *MinerAPIStub) Start(p0 context.Context, p1 []address.Address) error {
	return ErrNotSupported
}

func (s *MinerAPIStruct) StatesForMining(p0 context.Context, p1 []address.Address) ([]types.MinerState, error) {
	if s.Internal.StatesForMining == nil {
		return *new([]types.MinerState), ErrNotSupported
	}
	return s.Internal.StatesForMining(p0, p1)
}

func (s *MinerAPIStub) StatesForMining(p0 context.Context, p1 []address.Address) ([]types.MinerState, error) {
	return *new([]types.MinerState), ErrNotSupported
}

func (s *MinerAPIStruct) Stop(p0 context.Context, p1 []address.Address) error {
	if s.Internal.Stop == nil {
		return ErrNotSupported
	}
	return s.Internal.Stop(p0, p1)
}

func (s *MinerAPIStub) Stop(p0 context.Context, p1 []address.Address) error {
	return ErrNotSupported
}

func (s *MinerAPIStruct) UpdateAddress(p0 context.Context, p1 int64, p2 int64) ([]types.MinerInfo, error) {
	if s.Internal.UpdateAddress == nil {
		return *new([]types.MinerInfo), ErrNotSupported
	}
	return s.Internal.UpdateAddress(p0, p1, p2)
}

func (s *MinerAPIStub) UpdateAddress(p0 context.Context, p1 int64, p2 int64) ([]types.MinerInfo, error) {
	return *new([]types.MinerInfo), ErrNotSupported
}

func (s *MinerAPIStruct) WarmupForMiner(p0 context.Context, p1 address.Address) error {
	if s.Internal.WarmupForMiner == nil {
		return ErrNotSupported
	}
	return s.Internal.WarmupForMiner(p0, p1)
}

func (s *MinerAPIStub) WarmupForMiner(p0 context.Context, p1 address.Address) error {
	return ErrNotSupported
}

var _ Common = new(CommonStruct)
var _ MinerAPI = new(MinerAPIStruct)
